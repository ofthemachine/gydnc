---
title: Converting Cursor Rules to gydnc
description: Guidelines for migrating content from .cursor/rules and .agent behaviors/recipes to the gydnc format
tags:
    - process:migration
    - tech:documentation
---
# Converting Cursor Rules to gydnc Guidance

## Overview
This document provides a step-by-step process for migrating content from the older `.cursor/rules` and `.agent/behaviors/recipes` formats to the new gydnc guidance system.

## Prerequisites
- Access to source content (`.cursor/rules/*.mdc` files or `.agent/{behaviors,recipes}/*` files)
- gydnc CLI tool installed and initialized
- Understanding of both the source and target formats

## Migration Steps

### 1. Source Analysis
- Identify the source file format (MDC rules, behavior, or recipe)
- Examine frontmatter (YAML) for metadata like title, description, tags
- Review content structure and any special formatting

### 2. Format Conversion
- Convert YAML frontmatter to gydnc expected format
- Ensure Markdown content is properly formatted
- Organize content into clear sections with appropriate headers

### 3. Tag Structure Alignment
- Convert existing tags to follow the `category:value` style
- Use standard tag categories: tech, lang, process, quality, etc.
- Remove repository-specific tags for general guidance documents

### 4. Path Structure Planning
- Create a logical hierarchical alias for the guidance
- Follow conventions:
  - `must/` for critical behaviors
  - `should/` for recommended behaviors
  - `recipes/{domain}/{name}` for procedures
  - `process/{domain}/{name}` for processes

### 5. Content Adaptation
- Update any references to legacy paths (e.g., ".agent/") to appropriate gydnc paths
- Adjust "Related Guidance" sections to reference gydnc entities
- Ensure proper formatting of code blocks and examples

### 6. Creation Process
- Create a temporary file with the converted content
- Use stdin piping to create the guidance entity:
  ```bash
  cat converted_content.md | gydnc create \
    --title "Title" \
    --description "Description" \
    --tags "tag1,tag2,tag3" \
    path/to/guidance
  ```

### 7. Verification
- Retrieve the created guidance to verify formatting: `gydnc get path/to/guidance`
- Check listing to ensure it appears correctly: `gydnc list --json --filter-tags "relevant-tag"`
- Validate cross-references and links to other guidance entities

## Examples

### Example: Converting a Behavior
**Source (.agent/behaviors/must/safety-first.bhv):**
```yaml
---
id: safety-first
title: Safety First (Error Prevention)
priority: 900
description: Prioritize safety and error prevention in all operations.
tier: must
tags:
  - scope:core
  - quality:safety
  - quality:security
---

# Safety First
[Content...]
```

**Target Command:**
```bash
cat safety_first.md | gydnc create \
  --title "Safety First (Error Prevention)" \
  --description "Prioritize safety and error prevention in all operations." \
  --tags "scope:core,quality:safety,quality:security" \
  must/safety-first
```

### Example: Converting a Recipe
**Source (.agent/recipes/git/git-commit-creation.rcp):**
```yaml
---
id: git-commit-creation
type: recipe
tags:
  - tech:git
  - topic:commit_message
title: "Git Commit Creation"
description: "Guidelines for creating meaningful git commits."
---

# Git Commit Creation
[Content...]
```

**Target Command:**
```bash
cat git_commit.md | gydnc create \
  --title "Git Commit Creation" \
  --description "Guidelines for creating meaningful git commits." \
  --tags "tech:git,process:version_control" \
  recipes/git/commit-creation
```

## Best Practices
- Preserve the original intent and requirements of the guidance
- Ensure all critical sections are maintained
- Update examples to reflect current paths and tooling
- Modernize content where appropriate
- Remove outdated references or information
- Test the guidance to ensure it works as expected in the new format

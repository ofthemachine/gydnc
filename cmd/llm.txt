# Gydnc CLI Interaction for LLM Guidance

This document outlines how an LLM should interact with the `gydnc` CLI to manage and retrieve guidance.

## üö® CRITICAL: Start Every Session With This

**MANDATORY FIRST STEP - NEVER SKIP:**
```bash
gydnc list
```

‚ùå **NEVER do these mistakes:**
- Skip the overview command
- Run `gydnc init` (assume configuration exists)
- Start creating without understanding what guidance exists

## Core Commands Overview

| Command | Purpose |
|---------|---------|
| `init` | Initialize a new gydnc repository (rarely needed) |
| `list` | Show all available guidance entities |
| `get` | Retrieve guidance content |
| `create` | Create new guidance |
| `update` | Update existing guidance |

## Standard Workflow:

### 1. List Available Guidance
```bash
gydnc list
```
This shows all available guidance with metadata.

### 2. Get Guidance Content
```bash
gydnc get <alias>                    # Default structured format
gydnc get <alias> --output body      # Just the content
gydnc get <alias> --output json      # Full metadata + content
```

**Batch Retrieval (PREFERRED):**
```bash
gydnc get entity1 entity2 entity3
```

### 3. Create New Guidance

‚úÖ **CORRECT Pattern (here-document):**
```bash
cat << 'EOF' | gydnc create <alias> --title "Title" --tags "tag1,tag2"
# Your content here
Multiple lines work perfectly
Code blocks are preserved
EOF
```

‚úÖ **ALSO EFFECTIVE (temp file):**
```bash
# Write content to temp file, then pipe it
cat temp-content.md | gydnc create <alias> --title "Title" --tags "tag1,tag2"
```

#### Alias Hierarchy and Organization

**Use hierarchical aliases to organize guidance logically:**

| Category | Pattern | Example | Purpose |
|----------|---------|---------|---------|
| Must | `must/<topic>` | `must/safety-first` | Mandatory guidance |
| Should | `should/<topic>` | `should/code-style` | Recommended practices |
| Recipes | `recipes/<domain>/<action>` | `recipes/blog/post-creation` | Step-by-step procedures |
| Process | `process/<workflow>` | `process/migration/cursor-rules-to-gydnc` | Workflow guidance |

**Examples of hierarchical creation:**
```bash
# Mandatory safety guidance
cat << 'EOF' | gydnc create must/data-validation --title "Data Validation Requirements" --tags "type:requirement,scope:security"
# Data Validation Requirements
All user input must be validated...
EOF

# Development recipe
cat << 'EOF' | gydnc create recipes/testing/unit-test-setup --title "Unit Test Setup Guide" --tags "type:recipe,domain:testing"
# Unit Test Setup Guide
Steps to configure unit testing...
EOF

# Process guidance
cat << 'EOF' | gydnc create process/release/version-tagging --title "Version Tagging Process" --tags "type:process,scope:release"
# Version Tagging Process
How to tag releases properly...
EOF
```

‚ùå **AVOID:** Using `--body` flag for multi-line content

### 4. Update Existing Guidance

‚úÖ **CORRECT Pattern (here-document):**
```bash
cat << 'EOF' | gydnc update <alias>
# Updated content here
EOF
```

‚úÖ **ALSO EFFECTIVE (temp file):**
```bash
# Write content to temp file, then pipe it
cat updated-content.md | gydnc update <alias>
```

## üõ† Troubleshooting Common Issues

### "No such file or directory" when piping
**Problem:** File path resolution issues
**Solution:** Use here-documents (`cat << 'EOF'`) instead of file references

### "Active backend not initialized"
**Problem:** Missing configuration or wrong directory
**Solution:** Ensure proper GYDNC_CONFIG or run `gydnc init` if needed

### Empty content after creation
**Problem:** Content didn't pipe correctly
**Solution:** Use the exact here-document pattern shown above

### Session configuration issues
**Problem:** Environment variables not loaded
**Solution:** Source user profile: `source ~/.zshrc`

## üìã Command Reference

| Task | Command Pattern |
|------|----------------|
| List all | `gydnc listn` |
| Get content | `gydnc get <alias>` |
| Create new | `cat << 'EOF' \| gydnc create must/topic --title "Title" --tags "tags"` |
| Update existing | `cat << 'EOF' \| gydnc update recipes/domain/action` |

## üéØ Session Best Practices

1. **Always start:** `gydnc list`
2. **Identify relevant:** Look for existing guidance before creating
3. **Retrieve details:** `gydnc get <relevant-aliases>`
4. **Adapt as needed:** Re-fetch when conversation evolves
5. **Create/update:** Use proper stdin patterns with here-documents
6. **Batch operations:** Get multiple entities in one command
7. **Assume config exists:** Don't run init unnecessarily

### Example: Complete Workflow

```bash
# 1. Start with overview (MANDATORY)
gydnc list

# 2. Get relevant guidance
gydnc get must/safety-first should/code-style

# 3. Create new guidance if needed
cat << 'EOF' | gydnc create recipes/api/error-handling --title "API Error Handling Guide" --tags "type:recipe,domain:api"
# API Error Handling Guide

## Overview
Best practices for handling errors in API responses...

## Implementation Steps
1. Define error response schema
2. Implement consistent error codes
3. Add proper logging
EOF

# 4. Verify creation
gydnc get recipes/api/error-handling --output body
```

Follow these patterns and you'll have smooth gydnc interactions every time! üöÄ
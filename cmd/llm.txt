# Gydnc CLI Interaction for LLM Guidance

This document outlines how an LLM should interact with the `gydnc` CLI to manage and retrieve guidance.

## üö® CRITICAL: Start Every Session With This

**MANDATORY FIRST STEP - NEVER SKIP:**
```bash
gydnc list
```

‚ùå **NEVER do these mistakes:**
- Skip the overview command
- Run `gydnc init` (assume configuration exists)
- Start creating without understanding what guidance exists

## Core Commands Overview

| Command | Purpose |
|---------|---------|
| `init` | Initialize a new gydnc repository (rarely needed) |
| `list` | Show all available guidance entities |
| `get` | Retrieve guidance content |
| `create` | Create new guidance |
| `update` | Update existing guidance |

## Standard Workflow:

### 1. List Available Guidance
```bash
gydnc list
```
This shows all available guidance with metadata.

### 2. Get Guidance Content
```bash
gydnc get <alias>                    # Default structured format
gydnc get <alias> --output body      # Just the content
gydnc get <alias> --output json      # Full metadata + content
```

**Batch Retrieval (PREFERRED):**
```bash
gydnc get entity1 entity2 entity3
```

### 3. Create New Guidance

‚úÖ **PREFERRED & MOST ROBUST (Temporary File Pattern):**
This is the **most reliable method** for all types of content, especially extensive, complex, or AI-generated guidance.
```bash
# 1. Write your complete guidance BODY to a temporary file (e.g., temp-content.md).
#    The file should ONLY contain the body of the guidance.
#    All metadata (title, tags, description, etc.) MUST be set via CLI flags.
#
#    Example temp-content.md (contains ONLY the body):
#    This is the main body of the guidance.
#    It can be extensive and include code blocks.

# 2. Pipe this file into the gydnc command, providing all metadata via flags:
cat temp-content.md | gydnc create <alias> --title "My Guidance Title" --description "A clear description" --tags "type:filebased,scope:example"
```
*Advantages: Highest reliability, avoids complex shell escaping, excellent for long content, easy to integrate with tools/scripts that generate markdown.*

‚úÖ **EFFECTIVE FOR SIMPLER, INLINE CONTENT (Here-document pattern):**
Suitable for *simpler, manually typed inline content*. Can be error-prone for complex scenarios or AI-generated commands.
```bash
cat << 'EOF' | gydnc create <alias> --title "Title" --tags "tag1,tag2"
# Your simpler content here
Multiple lines work well for manual input.
Code blocks are preserved.
EOF
```

#### Alias Hierarchy and Organization

**Use hierarchical aliases to organize guidance logically:**

| Category | Pattern | Example | Purpose |
|----------|---------|---------|---------|
| Must | `must/<topic>` | `must/safety-first` | Mandatory guidance |
| Should | `should/<topic>` | `should/code-style` | Recommended practices |
| Recipes | `recipes/<domain>/<action>` | `recipes/blog/post-creation` | Step-by-step procedures |
| Process | `process/<workflow>` | `process/migration/cursor-rules-to-gydnc` | Workflow guidance |

**Examples of hierarchical creation:**
```bash
# Mandatory safety guidance
cat << 'EOF' | gydnc create must/data-validation --title "Data Validation Requirements" --tags "type:requirement,scope:security"
# Data Validation Requirements
All user input must be validated...
EOF

# Development recipe
cat << 'EOF' | gydnc create recipes/testing/unit-test-setup --title "Unit Test Setup Guide" --tags "type:recipe,domain:testing"
# Unit Test Setup Guide
Steps to configure unit testing...
EOF

# Process guidance
cat << 'EOF' | gydnc create process/release/version-tagging --title "Version Tagging Process" --tags "type:process,scope:release"
# Version Tagging Process
How to tag releases properly...
EOF
```

‚ùå **AVOID:** Using `--body` flag for multi-line content

### 4. Update Existing Guidance

‚úÖ **PREFERRED & MOST ROBUST (Temporary File Pattern):**
```bash
# 1. Write your updated guidance BODY to a temporary file (e.g., updated-content.md).
#    The file should ONLY contain the new body content.
cat updated-content.md | gydnc update <alias>
```

‚úÖ **EFFECTIVE FOR SIMPLER, INLINE CONTENT (Here-document pattern):**
```
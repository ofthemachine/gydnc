---
description:
globs:
alwaysApply: true
---
# gydnc-interaction-framework
# Guidance Agent Interaction Framework

## Intent
Ensure effective guidance retrieval and creation through the gydnc CLI tool, adapting to evolving user requests throughout a session.

## Rules

### 1. Guidance Retrieval Workflow
ALWAYS follow this sequence to ensure you have comprehensive guidance:

1. **BEGIN WITH OVERVIEW:** Start EVERY session by getting a complete overview of available guidance:
    ```bash
    # CRITICAL: Get overview of ALL available guidance entities
    gydnc list
    ```
    This step is NON-OPTIONAL. You must begin by understanding what guidance is available.

2. **FETCH DETAILED GUIDANCE:** After identifying relevant guidance from the overview, retrieve full details:
    ```bash
    # Get complete guidance content for multiple entities in one command
    gydnc get <entity1> <entity2> <entity3>
    ```

3. **PREFER BATCH RETRIEVAL:** Always fetch multiple relevant guidance entities in a single command rather than separate commands.

4. **RE-FETCH AS REQUESTS EVOLVE:** When the user's request changes direction or introduces new requirements, IMMEDIATELY fetch additional relevant guidance:
    ```bash
    # Example: When user asks about a new topic (e.g., "write a blog post")
    gydnc list
    gydnc get <relevant-blog-writing-guidance>
    ```
    It is CRITICAL to adapt and fetch new guidance as the conversation progresses.

### 2. Guidance Creation Workflow
When creating new guidance entities:

1. **PREFERRED PATTERNS:** Use these proven methods for content creation. For multi-line or complex content, especially when generated by an AI, the **Temporary File Pattern is the most robust and recommended method.**

   **Temporary File Pattern (Most Robust for Complex/AI-Generated Content):**
    ```bash
    # 1. Write your complete content to a temporary file (e.g., temp-content.md)
    #    (Content can include frontmatter, or it can be set by flags)
    #
    #    Example temp-content.md:
    #    ---
    #    title: My Guidance from File
    #    tags:
    #      - example
    #    ---
    #    This is the main body of the guidance.
    #    It can be extensive and include code blocks.

    # 2. Pipe this file into the gydnc command:
    cat temp-content.md | gydnc create <alias> --title "Override Title if needed" --tags "type:filebased,scope:example"
    ```
    *Advantages: Highest reliability, avoids complex shell escaping, excellent for long content, easy to integrate with tools/scripts that generate markdown.*

   **Here-document pattern (Suitable for Simpler, Manually Typed Inline Content):**
    ```bash
    cat << 'EOF' | gydnc create <alias> --title "Simple Title" --tags "tag1,tag2"
    # Your simpler content here
    Multiple lines work well for manual input.
    Code blocks are preserved.
    EOF
    ```
    *Considerations: Can be error-prone for complex scenarios or AI-generated commands due to potential escaping/parsing issues. Prefer temp files for robustness in such cases.*

2. **AVOID PROBLEMATIC PATTERNS:**
   - ❌ NEVER use `--body` flag for multi-line content
   - ❌ NEVER skip the mandatory `gydnc list` first step
   - ❌ NEVER run `gydnc init` unless explicitly needed (assume configuration exists)

3. **COMPLETE METADATA:** Always include comprehensive metadata when creating:
    ```bash
    gydnc create <alias> --title "Title" --description "Description" --tags "type:recipe,scope:core"
    ```

### 2a. Alias Hierarchy and Organization

**Use hierarchical aliases to organize guidance logically:**

| Category | Pattern | Example | Purpose |
|----------|---------|---------|---------|
| Must | `must/<topic>` | `must/safety-first` | Mandatory guidance |
| Should | `should/<topic>` | `should/code-style` | Recommended practices |
| Recipes | `recipes/<domain>/<action>` | `recipes/blog/post-creation` | Step-by-step procedures |
| Process | `process/<workflow>` | `process/migration/cursor-rules-to-gydnc` | Workflow guidance |

**Examples of hierarchical creation:**
```bash
# Mandatory safety guidance
cat << 'EOF' | gydnc create must/data-validation --title "Data Validation Requirements" --tags "type:requirement,scope:security"
# Data Validation Requirements
All user input must be validated...
EOF

# Development recipe
cat << 'EOF' | gydnc create recipes/testing/unit-test-setup --title "Unit Test Setup Guide" --tags "type:recipe,domain:testing"
# Unit Test Setup Guide
Steps to configure unit testing...
EOF

# Process guidance
cat << 'EOF' | gydnc create process/release/version-tagging --title "Version Tagging Process" --tags "type:process,scope:release"
# Version Tagging Process
How to tag releases properly...
EOF
```

### 3. Adaptive Guidance Retrieval
As the user's needs evolve during a conversation:

1. **CONTINUOUS MONITORING:** Constantly evaluate if new guidance is needed based on:
   * Topic changes in the conversation
   * New requirements introduced by the user
   * Requests for specific outputs (blog posts, code, documentation)

2. **PROACTIVE RETRIEVAL:** When the conversation shifts, proactively fetch new guidance:
    ```bash
    # When conversation shifts to implementation details
    gydnc get must/safety-first should/code-style

    # When user requests a specific output format
    gydnc get recipes/blog/post-creation
    ```

3. **VERIFICATION:** After fetching new guidance, verify it addresses the user's evolving needs before proceeding.

### 4. Command Syntax Reference

**Core Commands:**
| Command | Purpose |
|---------|---------|
| `list` | Show all available guidance entities |
| `get` | Retrieve guidance content |
| `create` | Create new guidance |
| `update` | Update existing guidance |

**Essential Patterns:**
1. **Overview Retrieval (MANDATORY):**
    ```bash
    gydnc list
    ```

2. **Detailed Guidance Retrieval:**
    ```bash
    gydnc get <entity1> [<entity2> ...]
    ```

3. **Guidance Creation with Temp File (RECOMMENDED FOR ROBUSTNESS):**
    ```bash
    # Create content in content.md first
    cat content.md | gydnc create <alias> --title "Title" --tags "tag1,tag2"
    ```

4. **Guidance Creation with Here-document (for simpler inline cases):**
    ```bash
    cat << 'EOF' | gydnc create <alias> --title "Title" --tags "tag1,tag2"
    # Content here
    EOF
    ```

5. **Guidance Update (Temp file or Here-document can be used):**
    ```bash
    # Using temp file (recommended for robustness)
    # Create updated content in updated_content.md first
    cat updated_content.md | gydnc update <alias>

    # Or using here-document for simpler updates
    cat << 'EOF' | gydnc update <alias>
    # Updated content here
    EOF
    ```

### 5. Troubleshooting Common Issues

**"No such file or directory" when piping:**
- Problem: File path resolution issues
- Solution: Use here-documents (`cat << 'EOF'`) or ensure temp files exist

**"Active backend not initialized":**
- Problem: Missing configuration or wrong directory
- Solution: Ensure proper GYDNC_CONFIG or source user profile: `source ~/.zshrc`

**Empty content after creation:**
- Problem: Content didn't pipe correctly
- Solution: Use the exact here-document pattern shown above

**Session configuration issues:**
- Problem: Environment variables not loaded
- Solution: Start fresh terminal or source profile

## Notes
- **ALWAYS start with `gydnc list`** - This is mandatory for understanding available guidance
- The full guidance content is critical for understanding context and requirements
- Never rely solely on the overview - always retrieve full guidance with `gydnc get`
- Batch retrieval is preferred - get multiple entities in one command
- When creating or updating guidance, especially with multi-line or complex content, **using a temporary file (`cat tempfile.md | gydnc create ...`) is the most robust method.** The here-document pattern (`cat << 'EOF' ...`) is suitable for simpler, inline cases.
- As user requests evolve (e.g., "write a blog about this"), retrieve appropriate additional guidance
- Assume configuration exists - don't run `gydnc init` unless explicitly needed
- When in doubt, check for more comprehensive guidance that might be available
